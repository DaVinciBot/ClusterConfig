{ config, pkgs, lib, ... }:

let
  # Name of the system
  systemName = "dvbar";
  # IP address of the system
  systemIp = "192.168.0.10";
  kubeMasterIP = "192.168.0.10";
  kubeMasterHostname = "api.kube";
  kubeMasterAPIServerPort = 6443;
in 
{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = systemName;

  # Enable networking
  networking.networkmanager.enable = true;
  networking.interfaces.eno1.ipv4.addresses = [ {
    address = systemIp;
    prefixLength = 24;
  } ];
  networking.defaultGateway = "192.168.0.1";
  networking.nameservers = ["8.8.8.8"];

  networking.extraHosts = "${kubeMasterIP} ${kubeMasterHostname}";


  # Set your time zone.
  time.timeZone = "Europe/Paris";

  # Select internationalisation properties.
  i18n.defaultLocale = "fr_FR.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "fr_FR.UTF-8";
    LC_IDENTIFICATION = "fr_FR.UTF-8";
    LC_MEASUREMENT = "fr_FR.UTF-8";
    LC_MONETARY = "fr_FR.UTF-8";
    LC_NAME = "fr_FR.UTF-8";
    LC_NUMERIC = "fr_FR.UTF-8";
    LC_PAPER = "fr_FR.UTF-8";
    LC_TELEPHONE = "fr_FR.UTF-8";
    LC_TIME = "fr_FR.UTF-8";
  };

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "fr";
    variant = "";
  };

  # Configure console keymap
  console.keyMap = "fr";

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.dvb = {
    isNormalUser = true;
    description = "DVB";
    extraGroups = [ "networkmanager" "wheel" "docker" ];
    packages = with pkgs; [];
    hashedPassword = "$y$j9T$1fV/dZnmB7TL98xPEwdpC.$hcs2JmnYEX1sJibJ.uPSIiRN9Iuvl7YUFfpd2hOysqC";
    openssh.authorizedKeys.keys = [
      # DVB public key
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIM/BX2n+yPz1/OD9k+pOPympb+UqS9ZK6VLX0MkKWB1h Generated By Termius"
      # Urbain's public key - Remove if not president anymore
      "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQD5ADKy6laNmJTEyOfBLJCp7OmKjniZfxTwQTy22ydlJFfLA0fbfIFbEV2qi1PdDaJ5IGZS3YCliiUP8d5OjjX/fSW978WRuAEP32DTUlCw6XKtfz1sCyDH2uam039fmJVkp57KpkhBXVNhUsS2qnstkIW1/e7m4JlXcvo0Xwv/GSWf1zuqaFcby7hNERfX+d1j3XZGYwP9ItYoe7ijvtgwGUYQbrWJSkW1Sd03aOLEKyptPdFJa+y+DK33gQFGeDMXGRS+XwuMo5V+/9ky/iUMt2DZh3ydzfDzrfb73EB3rBjgXGha8pLuntyYCH1rQOlZC9ehC8YcazrY+Kp1h1EHCci+3qvOUrkWCztnoK9IaDqPXqkGyv8gxSkV04uwOoKpTywYj8VQCSkicHpffVZneUialy/nY9ZXXJzDxUhcm6UhTUBU8dNBBS0AKoiOwqFIxu+PxYD/iQCHg5a9adgeZ5lbUld9FW1AiF1+DuPqujRRzQTRyDqwHE9KIutFyXU= urbai@beepboop"
    ];
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    ngrok    
    screen	
    git
    pciutils
    python3
    cudatoolkit
    neofetch
    tmux
    wget
    kompose
    kubectl
    kubernetes
    (blender.override {
        cudaSupport = true;
    })
  ];

  # Enable the OpenSSH daemon.
  services.openssh = {
    enable = true;
    settings.PasswordAuthentication = false;
    settings.KbdInteractiveAuthentication = false;
  };

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.11"; # Did you read the comment?


  # NVIDIA config driver
  # Enable OpenGL
  hardware.graphics = {
    enable = true;
  };

  # Load nvidia driver for Xorg and Wayland
  services.xserver.videoDrivers = ["nvidia"];

  hardware.nvidia = {

    # Modesetting is required.
    modesetting.enable = true;

    # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
    # Enable this if you have graphical corruption issues or application crashes after waking
    # up from sleep. This fixes it by saving the entire VRAM memory to /tmp/ instead 
    # of just the bare essentials.
    powerManagement.enable = false;

    # Fine-grained power management. Turns off GPU when not in use.
    # Experimental and only works on modern Nvidia GPUs (Turing or newer).
    powerManagement.finegrained = false;

    # Use the NVidia open source kernel module (not to be confused with the
    # independent third-party "nouveau" open source driver).
    # Support is limited to the Turing and later architectures. Full list of 
    # supported GPUs is at: 
    # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus 
    # Only available from driver 515.43.04+
    open = false;

    # Enable the Nvidia settings menu,
    # accessible via `nvidia-settings`.
    nvidiaSettings = true;

    # Optionally, you may need to select the appropriate driver version for your specific GPU.
    package = config.boot.kernelPackages.nvidiaPackages.stable;
  };
  # Docker config
  virtualisation.docker.enable = true;
  virtualisation.docker.daemon.settings = {
    data-root = "/home/dvb/docker";
  };

  # Server config
  # No mutable users by default
  users.mutableUsers = false;

  # Given that our systems are headless, emergency mode is useless.
  # We prefer the system to attempt to continue booting so
  # that we can hopefully still access it remotely.
  boot.initrd.systemd.suppressedUnits = lib.mkIf config.systemd.enableEmergencyMode [
    "emergency.service"
    "emergency.target"
  ];

  systemd = {
    # Given that our systems are headless, emergency mode is useless.
    # We prefer the system to attempt to continue booting so
    # that we can hopefully still access it remotely.
    enableEmergencyMode = false;

    # For more detail, see:
    #   https://0pointer.de/blog/projects/watchdog.html
    watchdog = {
      # systemd will send a signal to the hardware watchdog at half
      # the interval defined here, so every 7.5s.
      # If the hardware watchdog does not get a signal for 15s,
      # it will forcefully reboot the system.
      runtimeTime = lib.mkDefault "15s";
      # Forcefully reboot if the final stage of the reboot
      # hangs without progress for more than 30s.
      # For more info, see:
      #   https://utcc.utoronto.ca/~cks/space/blog/linux/SystemdShutdownWatchdog
      rebootTime = lib.mkDefault "30s";
      # Forcefully reboot when a host hangs after kexec.
      # This may be the case when the firmware does not support kexec.
      kexecTime = lib.mkDefault "1m";
    };

    sleep.extraConfig = ''
      AllowSuspend=no
      AllowHibernation=no
    '';
  };

  # Kubernetes config
  environment.variables.KUBECONFIG = "/etc/kubernetes/cluster-admin.kubeconfig";

  services.kubernetes = let
    api = "https://${kubeMasterHostname}:${toString kubeMasterAPIServerPort}";
  in
  {
    roles = ["node"];
    masterAddress = kubeMasterHostname;
    easyCerts = true;

    # point kubelet and other services to kube-apiserver
    kubelet.kubeconfig.server = api;
    apiserverAddress = api;

    # use coredns
    addons.dns.enable = true;

    # needed if you use swap
    kubelet.extraOpts = "--fail-swap-on=false";
  };

  systemd.services.set-docker0-promisc = {
    description = "Set docker0 interface in promiscuous mode";
    wantedBy = [ "multi-user.target" ];
    after = [ "network-online.target" "docker.service" ];
    serviceConfig = {
      Type = "oneshot";
      ExecStart = "/run/current-system/sw/bin/ip link set docker0 promisc on";
    };
  };
}
